name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

      infra_version:
        description: 'Git tag or branch name for infrastructure (e.g. main or v1.0.0-infra)'
        required: false

      image_tag:
        description: 'Docker image tag to deploy (e.g. v1.0.3 or v1.0.3-rc)'
        required: false

permissions:
  contents: read

env:
  TF_WORKING_DIR: terraform/environments/${{ github.event.inputs.env }}
  TF_VAR_image_tag: ''
  GIT_REF: ''

jobs:
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && (
        github.event.inputs.env == 'dev' ||
        (
          github.event.inputs.env == 'prod' &&
          github.ref == 'refs/heads/prod'
        )
      )

    environment:
      name: ${{ github.event.inputs.env }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_analytics_db_password: ${{ secrets.DB_ANALYTICS_PASSWORD }}

    steps:
      - name: Determine infrastructure version
        if: github.event.inputs.env == 'dev' && github.event.inputs.infra_version == ''
        run: |
          echo "‚ÑπÔ∏è No infra_version provided ‚Äî fetching latest from SSM..."
          REGION="us-west-2"
          VALUE=$(aws ssm get-parameter \
            --name "/app1/dev/infra_version" \
            --region $REGION \
            --query "Parameter.Value" \
            --output text)

          if [[ -z "$VALUE" ]]; then
            echo "‚ùå Could not fetch dev infra version from SSM"
            exit 1
          fi

          echo "GIT_REF=$VALUE" >> $GITHUB_ENV
          echo "‚úÖ Using infra version from SSM: $VALUE"

      - name: Use provided infra_version
        if: github.event.inputs.infra_version != ''
        run: |
          echo "GIT_REF=${{ github.event.inputs.infra_version }}" >> $GITHUB_ENV
          echo "‚úÖ Using manually specified infra version: $GIT_REF"

      - name: Checkout infrastructure code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GIT_REF }}

      - name: Validate infra_version for production
        if: github.event.inputs.env == 'prod'
        run: |
          if [ -z "${{ github.event.inputs.infra_version }}" ]; then
            echo "‚ùå infra_version is required for production deployments"
            exit 1
          fi

          echo "üîç Fetching tags..."
          git fetch --tags

          echo "üîç Checking if tag '${{ github.event.inputs.infra_version }}' exists locally..."

          if ! git rev-parse "refs/tags/${{ github.event.inputs.infra_version }}" > /dev/null 2>&1; then
            echo "‚ùå Tag '${{ github.event.inputs.infra_version }}' not found in local repository"
            exit 1
          fi

          echo "‚úÖ Tag '${{ github.event.inputs.infra_version }}' found. Continuing deployment."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Determine Docker image tag
        run: |
          if [[ "${{ github.event.inputs.env }}" == "prod" ]]; then
            if [[ -z "${{ github.event.inputs.image_tag }}" ]]; then
              echo "‚ùå image_tag is required for production deployments"
              exit 1
            fi
            echo "TF_VAR_image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV

            echo "üîç Checking if Docker image with tag '${{ github.event.inputs.image_tag }}' exists in ECR..."
            REGION="us-east-1"
            REPO="ecr-kapset-prod"
            IMAGE_EXISTS=$(aws ecr describe-images \
              --region $REGION \
              --repository-name $REPO \
              --query "imageDetails[?contains(imageTags, '${{ github.event.inputs.image_tag }}')]" \
              --output text)

            if [ -z "$IMAGE_EXISTS" ]; then
              echo "‚ùå Image tag '${{ github.event.inputs.image_tag }}' not found in $REPO"
              exit 1
            fi
            echo "‚úÖ Image tag exists: ${{ github.event.inputs.image_tag }}"

          else
            if [[ -n "${{ github.event.inputs.image_tag }}" ]]; then
              echo "TF_VAR_image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
              echo "‚úÖ Using provided tag for dev: ${{ github.event.inputs.image_tag }}"
            else
              echo "‚ÑπÔ∏è No image_tag provided ‚Äî fetching latest from SSM..."
              REGION="us-west-2"
              VALUE=$(aws ssm get-parameter --name "/app1/dev/image_tag" --region $REGION --query "Parameter.Value" --output text)
              if [[ -z "$VALUE" ]]; then
                echo "‚ùå Could not fetch dev image tag from SSM"
                exit 1
              fi
              echo "TF_VAR_image_tag=$VALUE" >> $GITHUB_ENV
              echo "‚úÖ Using tag from SSM: $VALUE"
            fi
          fi

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Save applied infra version to SSM (dev only)
        if: github.event.inputs.env == 'dev'
        run: |
          aws ssm put-parameter \
            --name "/app1/dev/infra_version" \
            --type String \
            --overwrite \
            --value "$GIT_REF"
            --region us-west-2

      - name: Show link to application
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          if terraform output -raw alb_dns_name >/dev/null 2>&1; then
            ALB_DNS=$(terraform output -raw alb_dns_name)
            echo ""
            echo "‚úÖ Link to application:"
            echo "http://${ALB_DNS}"
            echo "::notice title=‚úÖ Application URL::http://${ALB_DNS}"
          else
            echo "‚ùå ALB DNS name not found."
            echo "::warning title=ALB not found::Output variable 'alb_dns_name' is empty or undefined."
          fi
