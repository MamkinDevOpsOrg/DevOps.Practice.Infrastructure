name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      version_tag:
        description: 'Git tag or branch name (e.g. v1.0.2 or main)'
        required: false

permissions:
  contents: read

env:
  TF_WORKING_DIR: terraform/environments/${{ github.event.inputs.env }}

jobs:
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && (
        github.event.inputs.env == 'dev' ||
        (
          github.event.inputs.env == 'prod' &&
          github.ref == 'refs/heads/prod'
        )
      )

    environment:
      name: ${{ github.event.inputs.env }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_analytics_db_password: ${{ secrets.DB_ANALYTICS_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag || 'main' }}

      - name: Validate version_tag for production
        if: github.event.inputs.env == 'prod'
        run: |
          if [ -z "${{ github.event.inputs.version_tag }}" ]; then
            echo "‚ùå version_tag is required for production deployments"
            exit 1
          fi

          echo "üîç Fetching tags..."
          git fetch --tags

          echo "üîç Checking if tag '${{ github.event.inputs.version_tag }}' exists locally..."

          if ! git rev-parse "refs/tags/${{ github.event.inputs.version_tag }}" > /dev/null 2>&1; then
            echo "‚ùå Tag '${{ github.event.inputs.version_tag }}' not found in local repository"
            exit 1
          fi

          echo "‚úÖ Tag '${{ github.event.inputs.version_tag }}' found. Continuing deployment."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Show link to application
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          if terraform output -raw alb_dns_name >/dev/null 2>&1; then
            ALB_DNS=$(terraform output -raw alb_dns_name)
            echo ""
            echo "‚úÖ Link to application:"
            echo "http://${ALB_DNS}"
            echo "::notice title=‚úÖ Application URL::http://${ALB_DNS}"
          else
            echo "‚ùå ALB DNS name not found."
            echo "::warning title=ALB not found::Output variable 'alb_dns_name' is empty or undefined."
          fi
