name: Terraform CI/CD

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  pull_request:
    branches: ['main', 'prod']
  push:
    branches: ['main']

permissions:
  contents: read
  pull-requests: write

env:
  TF_WORKING_DIR: terraform/environments/${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env || (github.base_ref == 'prod' && 'prod' || 'dev') }}

jobs:
  validate_plan:
    name: Terraform Validate & Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env || (github.base_ref == 'prod' && 'prod' || 'dev') }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_analytics_db_password: ${{ secrets.DB_ANALYTICS_PASSWORD }}

    steps:
      - name: Show selected environment
        run: |
          echo "Using environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env || (github.base_ref == 'prod' && 'prod' || 'dev') }}"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color > plan.txt

      - name: Post plan as PR comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync(`${process.env.TF_WORKING_DIR}/plan.txt`, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üì¶ Terraform Plan Output\n\n\`\`\`hcl\n${plan}\n\`\`\``
            });

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    environment:
      name: ${{ github.event.inputs.env || 'dev' }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_analytics_db_password: ${{ secrets.DB_ANALYTICS_PASSWORD }}

    steps:
      - name: Show selected environment
        run: |
          echo "Using environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.env || (github.base_ref == 'prod' && 'prod' || 'dev') }}"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Show link to application
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          if terraform output -raw alb_dns_name >/dev/null 2>&1; then
            ALB_DNS=$(terraform output -raw alb_dns_name)
            echo ""
            echo "‚úÖ Link to application:"
            echo "http://${ALB_DNS}"
            echo "::notice title=‚úÖ Application URL::http://${ALB_DNS}"
          else
            echo "‚ùå ALB DNS name not found."
            echo "::warning title=ALB not found::Output variable 'alb_dns_name' is empty or undefined."
          fi
