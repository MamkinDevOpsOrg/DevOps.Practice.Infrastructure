name: Terraform CI/CD

on:
  pull_request:
    branches: ['main']
  push:
    branches: ['main']

permissions:
  contents: read
  pull-requests: write

env:
  TF_WORKING_DIR: terraform/main_project
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  validate_plan:
    name: Terraform Validate & Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/main_project
        run: terraform plan -no-color > plan.txt

      - name: Post plan as PR comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/main_project/plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“¦ Terraform Plan Output\n\n\`\`\`hcl\n${plan}\n\`\`\``
            });

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

  provision:
    name: Ansible Provision via Dynamic Inventory
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: apply

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Ansible and dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip unzip curl
          python3 -m pip install --upgrade pip
          pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws

      - name: Write SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY_PEM }}" > ansible/devops_practice.pem
          chmod 400 ansible/devops_practice.pem

      - name: Debug inventory from plugin
        run: |
          ansible-inventory -i ansible/aws_ec2.yml --graph

      - name: Run Ansible Playbook with Dynamic Inventory
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ansible-playbook ansible/playbook.yml \
            -i ansible/aws_ec2.yml \
            --private-key ansible/devops_practice.pem \
            --extra-vars "region=${{ env.AWS_REGION }} account_id=${ACCOUNT_ID}" \
            --ssh-extra-args="-o StrictHostKeyChecking=no" \
            -u ubuntu
